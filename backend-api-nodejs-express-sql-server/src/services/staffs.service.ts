
/**
 * Service
 * -- nh·∫≠n ƒë·∫ßu v√†o t·ª´ controller
 * -- x·ª≠ l√Ω nghi·ªáp v·ª•
 * -- tr·∫£ v·ªÅ d·ªØ li·ªáu cho controller
 */

import createHttpError from "http-errors";
import { IStaffCreate } from "../types/model";
import { myDataSource } from "../databases/data-source";
import { Staff } from "../entities/staff.entity";
import bcrypt from "bcrypt";

const staffRepository = myDataSource.getRepository(Staff); // d√πng ƒë·ªÉ truy c·∫≠p v√†o b·∫£ng staff

// ==> PRIVATE ROUTES
const getAll = async (query: any) => {

    const { page = 1, limit = 10 } = query;

    //N·∫øu t·ªìn t·∫°i sortType v√† sortBy th√¨ s·∫Ω s·∫Øp x·∫øp theo sortType v√† sortBy
    //N·∫øu kh√¥ng t·ªìn t·∫°i th√¨ s·∫Ω s·∫Øp x·∫øp theo createdAt
    let sortObject = {};
    const sortType = query.sort_type || 'desc';
    const sortBy = query.sort_by || 'staff_id';
    sortObject = { ...sortObject, [sortBy]: sortType === 'desc' ? -1 : 1 };

    console.log('<<=== üöÄsortObject  ===>>', sortObject);

    //T√¨m ki·∫øm theo ƒëi·ªÅu ki·ªán
    let where = {};
    //N·∫øu c√≥ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (query.Staff_name && query.Staff_name.length > 0) {
        where = { ...where, Staff_name: { $regex: query.Staff_name, $options: 'i' } };
    }
    //N·∫øu t√¨m ki·∫øm theo danh m·ª•c
    if (query.Staff && query.Staff.length > 0) {
        where = { ...where, Staff: query.Staff };
    }

    const staffs = await staffRepository.find({
        where,
        order: sortObject,
        skip: (page - 1) * limit,
        take: limit
    });

    return {
        staffs
    };
};


const getStaffById = async (id: string) => {
    return []

}

const createStaff = async (payload: IStaffCreate) => {
     // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
  const existingStaff = await staffRepository.findOne({ where: { email: payload.email } });
  if (existingStaff) {
    throw createHttpError(400, "Email already exists");
  }

  // Hash m·∫≠t kh·∫©u
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(payload.password, salt);

  // T·∫°o staff m·ªõi v·ªõi password ƒë√£ hash
  const staff = staffRepository.create({
    ...payload,
    password: hashedPassword,
  });

  await staffRepository.save(staff);

  // ·∫®n password khi tr·∫£ v·ªÅ
  const { password, ...result } = staff;
  return result;
}

const updateStaffByID = async (id: string, payload: any) => {
    const staff = await getStaffById(id);

    /***
     * Ki·ªÉm tra xem t√™n s·∫£n ph·∫©m b·∫°n v·ª´a ƒë·ªïi c√≥ kh√°c v·ªõi t√™n s·∫£n ph·∫©m hi·ªán t·∫°i kh√¥ng
     * N·∫øu kh√°c th√¨ ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o kh√°c c√≥ t√™n gi·ªëng kh√¥ng
     */

    //ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng



    //c√¢p nh·∫≠t Staff


    return staff;
}

const deleteStaffByID = async (id: string) => {


    return { message: "Staff deleted successfully" };
}

export default {
    getAll,
    getStaffById,
    createStaff,
    updateStaffByID,
    deleteStaffByID
    // other service methods can be added here
};


